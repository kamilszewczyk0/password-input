{"version":3,"sources":["helpers/utils/utils.tsx","Components/generatePasswordData.tsx","helpers/handlers/handlers.tsx","hooks/useInputs/reducer.tsx","hooks/useInputs/state.tsx","hooks/useInputs.tsx","styles/SinglePasswordInput/StyledSinglePasswordInput.tsx","Components/PasswordInput.tsx","App.tsx","styles/Wrappers/GlobalWrapper.tsx","index.tsx"],"names":["checkInputsValues","correctValues","providedValues","onSuccess","ifAllInputsFilled","every","item","length","allInputsFilled","_","index","randomNumber","min","max","Math","floor","random","setOfIndexes","string","arrayLength","split","quantity","set","Set","size","add","generateSet","values","generatePasswordData","password","keyArray","inputsLength","inputsLengthProvider","activeIndexesArray","sort","a","b","passwordArray","filter","some","Object","fromEntries","map","handlers","dispatch","ref","valuesObject","settingFocus","element","current","emptyEnabledInputsArray","disabled","value","focus","e","type","field","target","name","payload","setTimeout","hasOwnProperty","reducer","state","action","inputValues","inputsToIterate","Array","fill","passwordVisible","inputRefsCollection","initalState","isActive","array","inputIndex","useInputs","useMemo","initialStateValues","correctValuesMap","useReducer","handleChange","handleButtonClick","handleResetClick","inputRef","useRef","createRef","passwordValues","givenValues","keys","parseInt","useEffect","toReturn","innerAppState","givenData","inputsData","actions","StyledSinglePasswordInput","styled","input","PasswordInput","autoFocus","maxLength","toString","onChange","onClick","pass","boolean","App","GlobalWrapper","div","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.04e3cb8c.chunk.js","sourcesContent":["export const checkInputsValues = (\r\n  correctValues: string[],\r\n  providedValues: string[],\r\n  onSuccess: OnSuccess,\r\n): string | null => {\r\n  const ifAllInputsFilled =\r\n    providedValues && providedValues.every((item) => item && item.length);\r\n\r\n  const allInputsFilled =\r\n    correctValues &&\r\n    correctValues.every(\r\n      (_, index) => correctValues[index] === providedValues[index],\r\n    );\r\n\r\n  return ifAllInputsFilled ? onSuccess(allInputsFilled) : null;\r\n};\r\n","const randomNumber = (min: number, max: number): number => {\r\n  return Math.floor(Math.random() * (max + 1 - min) + min);\r\n};\r\n\r\nconst generateSet = (quantity: number, max: number): Set<number> => {\r\n  const set: Set<number> = new Set();\r\n  while (set.size < quantity) {\r\n    set.add(Math.floor(Math.random() * max));\r\n  }\r\n  return set;\r\n};\r\n\r\nconst inputsLengthProvider = (string: string): number => {\r\n  const arrayLength = string.split(\"\").length;\r\n  return randomNumber(2 * arrayLength, arrayLength);\r\n};\r\n\r\nconst setOfIndexes = (string: string): number[] => {\r\n  const arrayLength: number = string.split(\"\").length;\r\n\r\n  const setLength: number = randomNumber(0.6 * arrayLength, 0.4 * arrayLength);\r\n\r\n  const setOfIndexes = generateSet(setLength, arrayLength);\r\n\r\n  return [...setOfIndexes.values()];\r\n};\r\n\r\nconst correctValuesArray = (\r\n  keyArray: number[],\r\n  valueArray: string[],\r\n): string[] => {\r\n  return valueArray.filter((_, index) =>\r\n    keyArray.some((item) => item === index),\r\n  );\r\n};\r\nconst generatePasswordData = (\r\n  password: string,\r\n): [\r\n  inputsLength: number,\r\n  initialStateValues: IDynamicStringStringObject,\r\n  correctValuesMap: IDynamicStringStringObject,\r\n] => {\r\n  const inputsLength: number = inputsLengthProvider(password);\r\n\r\n  const activeIndexesArray: number[] = setOfIndexes(password).sort(\r\n    (a, b) => a - b,\r\n  );\r\n\r\n  const passwordArray: string[] = password.split(\"\");\r\n\r\n  const correctValues: string[] = correctValuesArray(\r\n    activeIndexesArray,\r\n    passwordArray,\r\n  );\r\n\r\n  const initialStateValues: IDynamicStringStringObject = Object.fromEntries(\r\n    activeIndexesArray.map((_, index) => [activeIndexesArray[index], \"\"]),\r\n  );\r\n\r\n  const correctValuesMap: IDynamicStringStringObject = Object.fromEntries(\r\n    activeIndexesArray.map((_, index) => [\r\n      activeIndexesArray[index],\r\n      correctValues[index],\r\n    ]),\r\n  );\r\n\r\n  return [inputsLength, initialStateValues, correctValuesMap];\r\n};\r\n\r\nexport default generatePasswordData;\r\n","import React from \"react\";\r\n\r\nconst handlers = (\r\n  dispatch: React.Dispatch<ACTIONTYPE>,\r\n  ref: IRefCollection,\r\n  valuesObject: IDynamicStringStringObject,\r\n): [\r\n  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void,\r\n  handleButtonClick: (e: React.MouseEvent) => void,\r\n  handleResetClick: (e: React.MouseEvent) => void,\r\n] => {\r\n  const settingFocus = (element: IRefCollection): void => {\r\n    if (element.current) {\r\n      const emptyEnabledInputsArray = element.current.filter((item) => {\r\n        return item.current && !item.current.disabled && !item.current.value;\r\n      });\r\n      if (emptyEnabledInputsArray.length)\r\n        emptyEnabledInputsArray[0].current &&\r\n          emptyEnabledInputsArray[0].current.focus();\r\n    }\r\n  };\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    dispatch({\r\n      type: \"ON_CHANGE\",\r\n      field: e.target.name,\r\n      payload: e.target.value,\r\n    });\r\n    settingFocus(ref);\r\n  };\r\n\r\n  const handleButtonClick = (e: React.MouseEvent): void => {\r\n    dispatch({type: \"SHOW_HIDE_PASSWORD\"});\r\n\r\n    setTimeout(() => {\r\n      settingFocus(ref);\r\n    }, 0);\r\n  };\r\n\r\n  const handleResetClick = (e: React.MouseEvent): void => {\r\n    for (const value in valuesObject) {\r\n      if (valuesObject.hasOwnProperty(value))\r\n        dispatch({\r\n          type: \"ON_CHANGE\",\r\n          field: value,\r\n          payload: \"\",\r\n        });\r\n    }\r\n\r\n    setTimeout(() => {\r\n      settingFocus(ref);\r\n    }, 0);\r\n  };\r\n\r\n  return [handleChange, handleButtonClick, handleResetClick];\r\n};\r\n\r\nexport default handlers;\r\n","export const reducer = (\r\n  state: IPasswordInputState,\r\n  action: ACTIONTYPE,\r\n): IPasswordInputState => {\r\n  switch (action.type) {\r\n    case \"INIT_VALUES\":\r\n      return {\r\n        ...state,\r\n        inputValues: action.payload,\r\n      };\r\n    case \"ON_CHANGE\":\r\n      return {\r\n        ...state,\r\n        inputValues: {...state.inputValues, [action.field]: action.payload},\r\n      };\r\n    case \"LOAD_INPUTS\":\r\n      return {\r\n        ...state,\r\n        inputsToIterate: new Array(action.payload).fill(\"\"),\r\n      };\r\n    case \"SHOW_HIDE_PASSWORD\":\r\n      return {\r\n        ...state,\r\n        passwordVisible: !state.passwordVisible,\r\n      };\r\n    case \"SET_REFS\":\r\n      return {\r\n        ...state,\r\n        inputRefsCollection: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const initalState: IPasswordInputState = {\r\n  inputValues: {} as IDynamicStringStringObject,\r\n  inputsToIterate: [],\r\n  passwordVisible: false,\r\n  inputRefsCollection: {} as IRefCollection,\r\n};\r\n","import {createRef, useEffect, useMemo, useReducer, useRef} from \"react\";\r\nimport generatePasswordData from \"../Components/generatePasswordData\";\r\n\r\nimport handlers from \"../helpers/handlers/handlers\";\r\nimport {reducer} from \"./useInputs/reducer\";\r\nimport {initalState} from \"./useInputs/state\";\r\n\r\nconst isActive = (array: number[], inputIndex: number): boolean =>\r\n  array.some((index) => index === inputIndex);\r\n\r\n//  HOOK\r\nconst useInputs = (password: string) => {\r\n  const [inputsLength, initialStateValues, correctValuesMap] = useMemo(\r\n    () => generatePasswordData(password),\r\n    [password],\r\n  );\r\n\r\n  const [\r\n    {inputValues, inputsToIterate, passwordVisible, inputRefsCollection},\r\n    dispatch,\r\n  ] = useReducer(reducer, initalState);\r\n\r\n  const [handleChange, handleButtonClick, handleResetClick] = handlers(\r\n    dispatch,\r\n    inputRefsCollection,\r\n    inputValues,\r\n  );\r\n\r\n  const inputRef = useRef<ISingeRef[] | null>(null);\r\n\r\n  inputRef.current = inputsToIterate.map(\r\n    (_, index) => inputRef.current![index] ?? createRef(),\r\n  );\r\n\r\n  const passwordValues: string[] = useMemo(\r\n    () => Object.values(correctValuesMap),\r\n    [correctValuesMap],\r\n  );\r\n  const givenValues: string[] = useMemo(\r\n    () => Object.values(inputValues),\r\n    [inputValues],\r\n  );\r\n\r\n  const activeIndexesArray: number[] = useMemo(\r\n    () => Object.keys(correctValuesMap).map((item) => parseInt(item, 10)),\r\n    [correctValuesMap],\r\n  );\r\n\r\n  useEffect(() => {\r\n    //montowanie komponenty=u\r\n    dispatch({type: \"LOAD_INPUTS\", payload: inputsLength});\r\n  }, [dispatch, inputsLength]);\r\n\r\n  useEffect(() => {\r\n    dispatch({type: \"INIT_VALUES\", payload: initialStateValues});\r\n  }, [initialStateValues]);\r\n\r\n  useEffect(() => {\r\n    dispatch({type: \"SET_REFS\", payload: inputRef});\r\n  }, [dispatch, inputRef]);\r\n\r\n\r\n\r\n  const toReturn: IToReturn = {\r\n    innerAppState: {\r\n      inputsToIterate,\r\n      passwordVisible,\r\n    },\r\n    givenData: {\r\n      passwordValues,\r\n      activeIndexesArray,\r\n      isActive,\r\n      inputRef,\r\n      inputValues,\r\n    },\r\n    inputsData: {\r\n      givenValues,\r\n    },\r\n    actions: {\r\n      handleButtonClick,\r\n      handleResetClick,\r\n      handleChange,\r\n    },\r\n  };\r\n\r\n  const {innerAppState, givenData, inputsData, actions} = toReturn;\r\n\r\n  return {innerAppState, givenData, inputsData, actions};\r\n};\r\n\r\nexport default useInputs;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledSinglePasswordInput = styled.input`\r\n  width: 45px;\r\n  height: 65px;\r\n  border: 1px solid #000;\r\n  text-align: center;\r\n  font-size: 35px;\r\n  margin: 5px;\r\n\r\n  &:disabled {\r\n    background-color: lightgrey;\r\n    border: none;\r\n    height: 67px;\r\n  }\r\n`;\r\n","import {checkInputsValues} from \"../helpers/utils/utils\";\r\nimport useInputs from \"../hooks/useInputs\";\r\n\r\nimport {StyledSinglePasswordInput} from \"../styles/SinglePasswordInput/StyledSinglePasswordInput\";\r\n\r\nconst PasswordInput = ({\r\n  password,\r\n  onSuccess,\r\n}: {\r\n  password: string;\r\n  onSuccess: (boolean: boolean) => string | null;\r\n}): JSX.Element | null => {\r\n  const {\r\n    innerAppState: {inputsToIterate, passwordVisible},\r\n    givenData: {\r\n      passwordValues,\r\n      activeIndexesArray,\r\n      isActive,\r\n      inputRef,\r\n      inputValues,\r\n    },\r\n    inputsData: {givenValues},\r\n    actions: {handleButtonClick, handleResetClick, handleChange},\r\n  } = useInputs(password);\r\n\r\n  if (inputsToIterate.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {inputsToIterate.map((_, index) => {\r\n        return (\r\n          <StyledSinglePasswordInput\r\n            autoFocus={index === activeIndexesArray[0]}\r\n            ref={inputRef.current![index]}\r\n            maxLength={parseInt(\"1\")}\r\n            key={index}\r\n            name={index.toString()}\r\n            disabled={!isActive(activeIndexesArray, index)}\r\n            onChange={handleChange}\r\n            value={inputValues[index]}\r\n            type={passwordVisible ? \"text\" : \"password\"}\r\n          />\r\n        );\r\n      })}\r\n      <button onClick={handleButtonClick}>\r\n        {passwordVisible ? `Hide` : `Show`} password\r\n      </button>\r\n      <button onClick={handleResetClick}>Reset password</button>\r\n      <p>{checkInputsValues(passwordValues, givenValues, onSuccess)}</p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PasswordInput;\r\n","import PasswordInput from \"./Components/PasswordInput\";\r\n\r\nconst pass: string = \"password\";\r\nconst onSuccess = (boolean: boolean): string | null => {\r\n  switch (boolean) {\r\n    case true:\r\n      return \"Password correct\";\r\n    case false:\r\n      return \"Enter correct password\";\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <p>Correct password: {pass}</p>\r\n      <PasswordInput password={pass} onSuccess={onSuccess} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import styled from \"styled-components\";\r\n\r\nexport const GlobalWrapper = styled.div`\r\n  height: 100vh;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nimport {GlobalWrapper} from \"./styles/Wrappers/GlobalWrapper\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <GlobalWrapper>\r\n      <App />\r\n    </GlobalWrapper>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\"),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\n"],"sourceRoot":""}